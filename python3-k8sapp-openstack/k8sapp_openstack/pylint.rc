[MASTER]
# Specify a configuration file.
rcfile=pylint.rc

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. Should be base names, not paths.
ignore=

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Use multiple processes to speed up Pylint.
jobs=4

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=lxml.etree,greenlet



[MESSAGES CONTROL]
# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once).
# See "Messages Control" section of
# https://pylint.readthedocs.io/en/latest/user_guide
disable=
        # C codes refer to Convention
 C0103, # invalid-name
 C0104, # disallowed-nameA
 C0112, # empty-docstring
 C0114, # missing-module-docstring
 C0115, # missing-class-docstring
 C0116, # missing-function-docstring
 C0123, # unidiomatic-typecheck !!!
 C0201, # consider-iterating-dictionary
 C0202, # bad-classmethod-argument
 C0206, # consider-using-dict-items
 C0207, # use-maxsplit-arg
 C0209, # consider-using-f-string
 C0301, # line-too-long
 C0302, # too-many-lines
 C0325, # superfluous-parens
 C0411, # wrong-import-order
 C0412, # ungrouped-imports
 C0413, # wrong-import-position
 C0414, # useless-import-alias  !!!
 C0415, # import-outside-toplevel
 C1802, # use-implicit-booleaness-not-len !!!
 C2801, # unnecessary-dunder-call  !!!
 C3002, # unnecessary-direct-lambda-call !!!
        # R codes refer to refactoring
 R0022, # useless-option-value !!!
 R0205, # useless-object-inheritance
 R0402, # consider-using-from-import
 R0901, # too-many-ancestors
 R0902, # too-many-instance-attributes
 R0903, # too-few-public-methods
 R0904, # too-many-public-methods
 R0911, # too-many-return-statements
 R0912, # too-many-branches
 R0913, # too-many-arguments
 R0914, # too-many-locals
 R0915, # too-many-statements
 R0916, # too-many-boolean-expressions
 R1702, # too-many-nested-blocks
 R1703, # simplifiable-if-statement
 R1704, # redefined-argument-from-local !!!
 R1705, # no-else-return
 R1707, # trailing-comma-tuple  !!!
 R1708, # stop-iteration-return !!!
 R1710, # inconsistent-return-statements
 R1711, # useless-return
 R1714, # consider-using-in
 R1717, # consider-using-dict-comprehension !!!
 R1718, # consider-using-set-comprehension
 R1719, # simplifiable-if-expression
 R1720, # no-else-raise
 R1721, # unnecessary-comprehension
 R1722, # consider-using-sys-exit !!!
 R1723, # no-else-break
 R1724, # no-else-continue
 R1725, # super-with-arguments
 R1726, # simplifiable-condition  !!!
 R1728, # consider-using-generator
 R1729, # use-a-generator
 R1730, # consider-using-min-builtin  !!!
 R1731, # consider-using-max-builtin  !!!
 R1732, # consider-using-with
 R1733, # unnecessary-dict-index-lookup !!
 R1734, # use-list-literal
 R1735, # use-dict-literal
        # W codes are warnings
 W0101, # unreachable
 W0105, # pointless-string-statement
 W0106, # expression-not-assigned
 W0107, # unnecessary-pass
 W0108, # unnecessary-lambda
 W0109, # duplicate-key                  !!!
 W0123, # eval-used
 W0125, # using-constant-test            !!!
 W0133, # pointless-exception-statement  !!!
 W0143, # comparison-with-callable       !!!
 W0150, # lost-exception
 W0201, # attribute-defined-outside-init
 W0211, # bad-staticmethod-argument
 W0212, # protected-access
 W0221, # arguments-differ
 W0223, # abstract-method
 W0231, # super-init-not-called
 W0235, # useless-super-delegation
 W0237, # arguments-renamed  !!!
 W0311, # bad-indentation
 W0402, # deprecated-module
 W0404, # reimported
 W0511, # fixme
 W0602, # global-variable-not-assigned  !!!
 W0603, # global-statement
 W0612, # unused-variable
 W0613, # unused-argument
 W0621, # redefined-outer-name
 W0622, # redefined-builtin
 W0631, # undefined-loop-variable
 W0703, # broad-except (pylint 2.16 renamed to broad-except-caught)
 W0706, # try-except-raise
 W0707, # raise-missing-from
 W0719, # broad-exception-raised
 W1113, # keyword-arg-before-vararg
 W1310, # format-string-without-interpolation  !!!
 W1401, # anomalous-backslash-in-string
 W1406, # redundant-u-string-prefix
 W1505, # deprecated-method
 W1514, # unspecified-encoding
 W3101, # missing-timeout
 E0601, # used-before-assignment  !!!
 E0605, # invalid-all-format      !!!
 E1101, # no-member
 E1111, # assignment-from-no-return
 E1121, # too-many-function-args  !!!
 E1123, # unexpected-keyword-arg  !!!
 E1136, # unsubscriptable-object  !!!

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html
output-format=text

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)


[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes


[FORMAT]
# Maximum number of characters on a single line.
max-line-length=85

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually 4 spaces or "\t" (1 tab).
indent-string='    '


[TYPECHECK]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis
ignored-modules=distutils,eventlet.green.subprocess,six,six.moves

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
# pylint is confused by sqlalchemy Table, as well as sqlalchemy Enum types
# ie: (unprovisioned, identity)
# LookupDict in requests library confuses pylint
ignored-classes=SQLObject, optparse.Values, thread._local, _thread._local,
                Table, unprovisioned, identity, LookupDict

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent


[BASIC]
# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__


[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[VARIABLES]
# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[IMPORTS]
# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=


[DESIGN]
# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20


[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls


[EXCEPTIONS]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions=builtins.BaseException,builtins.Exception
